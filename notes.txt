1. Difference between React and React-DOM?
A) React has the core libraries like useRef, useState, components, virtualDOM. And React-DOM is the bridge between react and real DOM. It renders components to the DOM via ReactDOM.render().
React = logic behind the components and state.
React-DOM = rendering those components to the browser.

2. I have installed react using NPM i and i am trying to access it using import { useEffect } from "./node_modules/react"; from index.js. But i am getting react/:1 Failed to load module script: Expected a JavaScript module script but the server responded with a MIME type of "text/html". Strict MIME type checking is enforced for module scripts per HTML spec. error. Why this doesn't work

A) Node.js modules (node_modules) are meant for development: They are not served as static files in the browser. They need to be bundled using tools like Webpack, Parcel, or Vite.
MIME Type Mismatch: The browser expects index.js to be a JavaScript module, but because the server is not configured to handle the node modules correctly, it's likely giving MIME type error.
But same thing if you do with normal dummy.js file, and export a function then it works because that is a normal js file. Node modules are related to node js and that will use require etc that doesn't run in the browser.

3. const path = require('path');  , I dont see any path module in node modules. How it works?
A) The path module is a core module in Node.js, which means it comes pre-installed with Node.js and is not located in the node_modules directory. Core modules are built directly into Node.js, so they do not need to be installed via npm or included in your node_modules folder.

4. what is a transpiler?
A) A transpiler (short for translator and compiler) is a type of compiler that transforms source code from one programming language to another. However, unlike a typical compiler that converts high-level code into lower-level code (e.g., assembly or machine code), a transpiler converts code from one high-level language to another high-level language, typically maintaining a similar level of abstraction.
Babel converts modern JavaScript (ES6/ES7+) into older versions (like ES5) to ensure compatibility with older browsers that don't support the latest features.

5. Babel loader, Babel core and presets difference?
A) - babel-loader: This is the Webpack loader that tells Webpack to use Babel to process your JavaScript files. 
   - @babel/core provides the foundational functionality for Babel. This includes the ability to parse JavaScript code, apply transformations based on specified rules (which are typically
     provided by plugins and presets), and gene
     
     rate the transformed code.
   - @babel/core provides the core functionalities for parsing, transforming, and generating JavaScript code, but it needs presets (like @babel/preset-env) to know what transformations to apply.
   - Presets contain predefined sets of rules (plugins) that guide Babel on how to transform specific features of JavaScript or other syntaxes (like JSX in the case of React).
   - Using @babel/core alone wouldn't apply any transformations, while using presets without @babel/core wouldn't perform the actual processing of the code.

6. What does style loader and css-loader do and why css loader is inside style loader?
A) The style-loader is responsible for injecting CSS styles directly into the DOM during runtime. It does this by creating <style> tags in the <head> section of your HTML document and then adding the CSS rules to those tags. This allows your styles to be applied to your HTML elements while the application is running.

   - Purpose: Dynamically injects CSS into the DOM during runtime. (it can be seen in bundle.js after build files are generated).
   - Behavior: It collects all styles from your JavaScript modules and appends them to the document, making sure the styles take effect immediately without needing an external stylesheet.

   The css-loader is responsible for interpreting @import and url() in your CSS files and resolving them. Additionally, it can convert your CSS into JavaScript modules. This means that when Webpack processes a CSS file, css-loader parses the file to understand how styles should be bundled and makes it possible to import CSS into JavaScript files.

  - Purpose: Loads and parses CSS files into JavaScript so they can be bundled.
  - Behavior: Turns the CSS into a JavaScript representation (an array or object of strings), which can be further processed by Webpack.

  why CSS is inside style loader:
  It’s important to understand that Webpack processes loaders from right to left (or bottom to top if you're looking at the array).

  Here's the flow:
  css-loader (first step):

  css-loader reads the CSS file, resolves @import and url() paths, and turns the CSS into a JavaScript module that exports the styles as a string.
  Example: import styles from './styles.css' now provides a string that represents the CSS in the styles variable.
  style-loader (second step):

  After css-loader turns the CSS into JavaScript, style-loader takes that JS-generated string of CSS rules and dynamically injects it into the DOM as a <style> tag.
  This ensures that when your app runs, the CSS is applied immediately, without needing to load a separate .css file from a server.

  In production, instead of using style-loader, you typically use the **MiniCssExtractPlugin**. This plugin extracts your CSS into separate .css files and links them in your HTML. This improves performance because:

  The CSS is loaded as a separate file (instead of being injected into the DOM).
  The browser can cache the CSS file independently, improving load times for subsequent visits.

  The css file is created and fetched from the server. For best use, we should use combination of external CSS and internal CSS files.

  7. What is your observations with assets/CSS webpack config?
  A) CASE1: When you dont write asset/images config, and just write CSS config to import the CSS file
      - You can't import an image in jsx/tsx and use that image in the js code.
      - no user defined asset folder will be created and its path will be injected in the CSS, js generated.
      - Here webpack by default will convert the URL mentioned in asset to images with hash code and those images will be placed directly in the dist with no sub folder or sub-name before hash code.
      - Assets are always regenerated in the dist and your asset sub folder does'nt matter in the final build. It is just for easy development for developers.
      - if you don't explicitly configure asset handling (for images and other static files) in Webpack, it will still process those files and output them to the dist folder with hashed filenames. However, this default behavior has implications for preloading these assets (we can't preload).
   B) CASE2: When you write asset/images in config
      - we can import an image in jsx/tsx and use that image in the js code. The return from url (import myImage from './assets/myImage.js) gives the URL of the final build path that is from the dist folder.
      - webpack will convert the URL mentioned in asset to images with hash code and sub name of the image and those images will be placed in the dist with the given sub folder name in the webpack config.
      - when you use a preload file that imports assets, Webpack ensures that the imports are treated consistently across your application. If you import an asset in the preload file and then also import it in a component, both imports will refer to the same asset file, including the generated hashed URL, which is consistent due to Webpack's deduplication and caching mechanisms.

  8) How to include some components in external CSS and others injected in the bundle.js in head section dynamically?
  A) write below configurations:
     The reason you need to use the exclude option in the second rule is to prevent conflicts and ensure that Webpack correctly applies the intended loader to the appropriate CSS files.
      {
        test: /\.css$/i,  // Target only .module.css files
        include: path.resolve(__dirname, './src/board/'), // Target component CSS
        use: [
          'style-loader',          // Injects styles into the DOM
          {
            loader: 'css-loader',
            options: {
              modules: {
                namedExport: false
              },
            },
          },
        ],
      },
      {
        test: /\.css$/i,  // Target only .module.css files
        exclude: path.resolve(__dirname, './src/board/'), // Target component CSS
        use: [
          MiniCssExtractPlugin.loader,
          {
            loader: 'css-loader',
            options: {
              modules: {
                namedExport: false
              },
            },
          },
        ],
      },

9) Why we need hash on assets, js, css, and is hash not needd for HTML ( cache-busting) ?
   A) Cache-busting is a technique used to force the browser to load the latest version of an asset, rather than relying on an older, cached version. Webpack’s hashing feature helps with cache-busting by appending a unique hash to filenames whenever the file content changes.

   When main.abc123.css is cached, the browser will use it for subsequent page loads. However, after you make a change in the CSS file, Webpack rebuilds and generates main.def456.css with a new hash. The browser detects the new filename and loads it, ensuring users see the latest styles. 

   If you make changes to main.css and redeploy the site (if no hash code), the browser might still use the old cached version of main.css, since there’s no indicator (like a new filename) to tell it that the file has been updated. Users would likely continue to see the outdated styles until the browser’s cache expires, which can take days or weeks, depending on the browser settings and server headers.

   The index.html file can still be cached by the browser, but generally, caching strategies are set up to make sure index.html is refreshed more frequently than other assets, like JavaScript and CSS, because it acts as the entry point to the application.

10) what happens if you keep a folder with images that is not used for any component, does webpack even convert that? and how do we preload it (using '../assets/)?
A) If you have an image folder that contains files not imported or referenced by any components or files in your project, Webpack will not process or include these files in the final build by default. Webpack only bundles assets that are directly or indirectly referenced in your code.

11. Cache-control:
A) 1. re-validate max-age:3600 - after 3600 seconds, revalidate with server if the asset has been modified. This revalidation happens with help of last-modified header of that asset. If asset do not change then we get 304 status code (asset taken fron cache and revalidated) else 200.
   2. no-cahe max-age: 3600 - This means that on every asset call, it will revalidate with server. Here max-age: 3600 will not matter because it will always revalidate.
   3. Immutable max-age:3600 - max-age doesnt matter because here asset will always remain same and from the cache once stored. (for some reason it is coming as 304 after max-age)
   4. no-store - never store in cache.